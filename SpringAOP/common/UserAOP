package com.example.demo.common;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.stereotype.Component;

/**
 * @author 26568
 * @date 2023-05-15 9:39
 */
@Aspect  // 表明一个切面
@Component
public class UserAOP {
    // 切点 （配置拦截规则）
                   // * 表示返回类型为所有类型                 *UserController中表示所有方法  ..表示所有类型的参数(int,String)
    @Pointcut("execution(* com.example.demo.controller.UserController.*(..))")
    public void pointcut() {
    }
    // 前置通知
    @Before("pointcut()")
    public void doBefore() {
        System.out.println("执行了前置通知");
    }
    // 后置通知
    @After("pointcut()")
    public void doAfter() {
        System.out.println("执行了后置通知");
    }
    // 环绕通知
    @Around("pointcut()")
    public Object doAround(ProceedingJoinPoint joinPoint) throws Throwable {
        System.out.println("开始执行环绕通知了");
        Object object = joinPoint.proceed();
        System.out.println("环绕通知结束了");
        return object;
    }
}
