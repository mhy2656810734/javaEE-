package com.example.demo.controller;

import com.example.demo.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author 26568
 * @date 2023-05-17 15:14
 */
@RestController
@RequestMapping("/user2")
public class UserController2 {
    @Autowired
    private UserService userService;

    // 声明式事务
    //@Transactional(isolation = Isolation.DEFAULT) // 设置spring 事务的隔离级别
    @Transactional  // 在方法之前开始事务   方法正常执行结束之后提交事务 如果发生异常则回滚事务
    @RequestMapping("/del")
    public int del(Integer id) {
        if (id == null || id <= 0) return 0;
        int result = userService.del(id);
        System.out.println("删除："+result);
        try {
            int num = 10/0; // 当这个异常被捕获时，spring事务并不会回滚，这是一个危险操作
        } catch (Exception e) {
           // e.printStackTrace();
           // throw e;// 1.抛出这个异常，让事务感知到异常，然后执行回滚
            // 2.直接手动回滚事务
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
        }
        return result;
    }
}
