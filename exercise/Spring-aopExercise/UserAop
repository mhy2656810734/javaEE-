package com.example.demo.common;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;

/**
 * @author 26568
 * @date 2023-06-27 13:45
 */
@Aspect // 切面
@Component
public class UserAop {
    @Pointcut("execution(* com.example.demo.controller.UserController.*(..))")
    public void pointcut() {
    }
    @Before("pointcut()") // 切点名
    public void doBefore() {
        System.out.println("执行了前置通知："+ LocalDateTime.now());
    }
    @After("pointcut()")
    public void doAfter() {
        System.out.println("执行了后置通知");
    }
    @Around("pointcut()") //将正在执行的连接点(也就是触发切点的点)交给程序猿进行处理
    public Object doAround(ProceedingJoinPoint joinPoint) throws Throwable {
        System.out.println("开始执行环绕通知");
        // 执行拦截方法
        Object object = joinPoint.proceed();
        System.out.println("结束环绕通知");
        return object;
    }
}
